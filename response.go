package hat

import (
	"bytes"
	"io/ioutil"
	"net/http"

	"github.com/stretchr/testify/require"
)

// ResponseAssertion asserts a quality of the response.
type ResponseAssertion func(r Response)

// CombineResponseAssertions returns a new ResponseAssertion which internally
// calls each member of asserts in the provided order.
func CombineResponseAssertions(asserts ...ResponseAssertion) ResponseAssertion {
	return func(r Response) {
		for _, a := range asserts {
			a(r)
		}
	}
}

// Response represents an HTTP response generated by hat.Request.
type Response struct {
	*http.Response
	t T

	req *http.Request
}

// DuplicateBody reads in the response body.
// It replaces the underlying body with a duplicate.
func (r Response) DuplicateBody() []byte {
	byt, err := ioutil.ReadAll(r.Body)
	require.NoError(r.t, err, "failed to read body")

	r.Response.Body = ioutil.NopCloser(bytes.NewReader(byt))

	return byt
}

// Assert runs each assertion against the response.
// It closes the response body after all of the assertions have ran.
func (r Response) Assert(assertions ...ResponseAssertion) *Response {
	defer r.Body.Close()

	for _, a := range assertions {
		a(r)
	}
	return &r
}

// But applies opts to the request that created this response,
// then sends it again.
func (r Response) But(opts ...RequestOption) *Response {
	for _, o := range opts {
		o(r.req)
	}

	return r.t.sendRequest(r.req)
}
